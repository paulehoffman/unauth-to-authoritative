---
title: Recursive to Authoritative DNS with Unauthenticated Encryption
abbrev: Resolving with Unauth. Encryption
docname: draft-ietf-dprive-unauth-to-authoritative-05

stand_alone: true

ipr: trust200902
kw: Internet-Draft
cat: exp

pi:
  toc: yes
  tocdepth: 4
  sortrefs: yes
  symrefs: yes

author:
 -
   ins: P. Hoffman
   name: Paul Hoffman
   org: ICANN
   email: paul.hoffman@icann.org
 -
   ins: P. van Dijk
   name: Peter van Dijk
   org: PowerDNS
   email: peter.van.dijk@powerdns.com

normative:
  DNS-SVCB: I-D.schwartz-svcb-dns
  DNS-TERM: I-D.ietf-dnsop-rfc8499bis
  FULL-AUTH: I-D.rescorla-dprive-adox-latest
  MUST-SHOULD-1: RFC2119
  MUST-SHOULD-2: RFC8174
  OPPORTUN: RFC7435
  SVCB: I-D.ietf-dnsop-svcb-https
  TLS-13: RFC8446


informative:
  DNS-OVER-HTTPS: RFC8484
  DNS-OVER-QUIC: I-D.ietf-dprive-dnsoquic
  DNS-OVER-TCP: RFC7766
  DNS-OVER-TLS: RFC7858
  EDNS-TCP: RFC7828
  HTTP-1.1: RFC7230
  PRIVACY-REC: RFC8932
  PRIVACY-CONS: RFC9076
  RSO_STATEMENT:
    title: Statement on DNS Encryption
    date: 2021
    target: https://root-servers.org/media/news/Statement_on_DNS_Encryption.pdf
  TCP-TIMEOUT: I-D.ietf-dnsop-dns-tcp-requirements
  TLS-1.3: RFC8446
    
--- abstract

This document describes a use case and a method for a DNS recursive resolver to use unauthenticated encryption
when communicating with authoritative servers.
The motivating use case for this method is that more encryption on the Internet is better,
and some resolver operators believe that unauthenticated encryption is better than no encryption at all.
The method described here is optional for both the recursive resolver and the authoritative server.

<!-- TODOs

Add text about a future with DSGLUE

Look into whether ALPN in the server is required for using SVCB records; if so, maybe carve out an exception here.

Some of the mentions of TCP in this document ignore DoQ (which, presumably, also involves some roundtrips):
 * 0 round-trips to a known server (common)
 * 1 round-trip if crypto keys are not new
 * 2 round-trips if QUIC version negotiation needed

Be explicit about things that seem obvious to us but may not be to others.
 * unauth clients probably should not send SNIs

-->

--- middle

# Introduction

A recursive resolver using traditional DNS over port 53 may wish instead to use encrypted
communication with authoritative servers in order to limit snooping of its DNS traffic by passive or on-path attackers.
The recursive resolver can use unauthenticated encryption (defined in {{OPPORTUN}}) to achieve
this goal.

This document describes the use case for unauthenticated encryption in recursive resolvers
in {{opp_use_case}}.
The encryption method with authoritative servers can be
DNS-over-TLS {{DNS-OVER-TLS}} (DoT),
DNS-over-HTTPS {{DNS-OVER-HTTPS}} (DoH), and/or
DNS-over-QUIC {{DNS-OVER-QUIC}} (DoQ).

The document also describes a discovery method that shows if an authoritative server
supports encryption in {{disc}}.

See {{FULL-AUTH}} for a description of the use case and a proposed mechanism
for fully-authenticated encryption.

NOTE: The draft uses the SVCB record as a discovery mechanism for encryption supported by a particular authoritative server.
Any record type that can show multiple types of encryption (currently DoT, DoH, and DoQ) can be used for discovery.
Thus, this record type might change in the future, depending on the discussion in the DPRIVE WG.

## Use Case for Unauthenticated Encryption {#opp_use_case}

The use case in this document for unauthenticated encryption is recursive resolver operators who are happy to use
encryption with authoritative servers if doing so doesn’t significantly slow down getting answers, and
authoritative server operators that are happy to use encryption with recursive resolvers if it
doesn’t cost much.
In this use case, resolvers do not want to return an error for requests that were sent over an
encrypted channel if they would have been able to give a correct answer using unencrypted transport.
Ultimately, this effort has two goals:
- to protect queries from failing in case authenticated encryption is not available,
- and to enable recursive resolver operators to encrypt without server authentication.

Operators of resolvers and authoritative servers understand that using encryption costs something, but are willing to absorb the costs
for the benefit of more Internet traffic being encrypted.
The extra costs (compared to using traditional DNS on port 53) include:

- Extra round trips to establish TCP for every session (but not necessarily for every query)
- Extra round trips for TLS establishment
- Greater CPU use for TLS establishment
- Greater CPU use for encryption after TLS establishment
- Greater memory use for holding TLS state

This use case is not expected to apply to all resolvers or authoritative servers.
For example, according to {{RSO_STATEMENT}}, some root server operators do not want
to be the early adopters for DNS with encryption.
The protocol in this document explicitly allows authoritative servers to signal when they are ready
to begin offering DNS with encryption.

## Summary of Protocol

This summary gives an overview of how the parts of the protocol work together.

- The resolver discovers whether any authoritative server of interest supports DNS with encryption
by querying for the SVCB records {{SVCB}}.
As described in {{DNS-SVCB}}, SVCB records can indicate that a server supports
encrypted transport of DNS queries.

   NOTE: In this document, the term "SVCB record" is used *only* for SVCB records that indicate encryption
   as described in {{DNS-SVCB}}.
   SVCB records that do not have these indicators in the RDATA are not included in the term "SVCB record" in this document.

- The resolver uses any authoritative server with a SVCB record that indicates encryption to perform unauthenticated encryption.

- The resolver sets up encryption even if server authentication in the TLS session fails.

## Definitions

The terms "recursive resolver", "authoritative server", and "classic DNS" are defined in
{{DNS-TERM}}.

"DNS with encryption" means transport of DNS over any of DoT, DoH, or DoQ.
A server that supports DNS with encryption supports transport over one or more
of DoT, DoH, or DoQ.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY",
and "OPTIONAL" in this document are to be interpreted as described in
BCP 14 {{MUST-SHOULD-1}} {{MUST-SHOULD-2}} when, and only when, they
appear in all capitals, as shown here.


# Discovery of Authoritative Server Encryption {#disc}

An authoritative server that supports DNS with encryption makes itself discoverable by publishing
one or more DNS SVCB records that contain "alpn" parameter keys.
SVCB records are defined in {{SVCB}}, and the DNS extension to those records is defined in {{DNS-SVCB}}.

A recursive resolver discovers whether an authoritative server supports DNS with encryption by
looking for cached SVCB records for the name of the authoritative server with a positive answer.
A cached DNS SVCB record with a negative answer indicates that the authoritative server does not support any encrypted transport.

A resolver MAY also use port probing, although the mechanism for that is not described here.

If the cache has no positive or negative answers for any SVCB record for any of a zone's authoritative servers,
the resolver MAY send queries for the SVCB records (and for the A/AAAA records of names mentioned in those SVCB records) for some or all of the zone's authoritative servers
and wait for a positive response so that the resolver can use DNS with encryption for the original query.
In this situation, the resolver MAY instead just use classic DNS for the original query
but simultaneously queue queries for the SVCB (and subsequent A/AAAA) records for some or all of the zone's authoritative servers
so that future queries might be able to use DNS with encryption.

DNSSEC validation of SVCB RRsets used strictly for this discovery mechanism is not mandated.


# Processing Discovery Responses {#proc}

After a resolver has DNS SCVB records in its cache (possibly due to having just queried for them),
it needs to use those records to try to find an authoritative server that supports DNS with encryption.
This section describes how the resolver can make that selection.

A resolver MUST NOT attempt encryption for a server that has a negative response in the resolver's cache for the associated
DNS SVCB record.

After sending out all requests for SVCB records for the authoritative servers in the NS RRset for a name,
if all of the SVCB records for those authoritative servers in the cache are negative responses,
the resolver MUST use classic (unencrypted) DNS instead of encryption.
Similarly, if none of the DNS SVCB records for the authoritative servers in the cache have supported "alpn" parameters,
the resolver MUST use classic (unencrypted) DNS instead of encryption.

If there are any DNS SVCB records in the cache for the authoritative servers for a zone with supported "alpn" parameters,
the resolver MUST try each indicated authoritative server using DNS with encryption until it successfully sets up a connection.
The resolver attempts to use the encrypted transports that are in the associated SVCB record for the authoritative server.

A resolver SHOULD keep a DNS with encryption session to a particular server open if it expects to send additional queries
to that server in a short period of time.
{{DNS-OVER-TCP}} says "both clients and servers SHOULD support connection reuse" for TCP
connections, and that advice could apply as well for DNS with encryption,
especially as DNS with encryption has far greater overhead for re-establishing a connection.
If the server closes the DNS with encryption session, the resolver can possibly re-establish a DNS with encryption session
using encrypted session resumption.
Configuration for the maximum timeout, minimum timeout, and duration of encrypted sessions
should take into consideration the recommendations given in
{{TCP-TIMEOUT}}, {{EDNS-TCP}}, and (for DoH) {{HTTP-1.1}}.

For any DNS with encryption protocols, TLS version 1.3 {{TLS-13}} or later MUST be used.

A resolver following this protocol does not need to authenticate TLS servers.
Thus, when setting up a TLS connection, if the server's authentication credentials do not match those
expected by the resolver, the resolver continues with the TLS connection.
Privacy-oriented resolvers (defined in {{PRIVACY-REC}}) following this protocol MUST NOT indicate that they are using
encryption because this protocol is susceptible to on-path attacks.

If the resolver's connection attempts to each candidate authoritative server
experience TLS failures (such as those in {{tls_failure}}), the resolver
instead queries using classic DNS with any of the authoritative servers.

## Resolver Process as Pseudocode {#resolver_pseudocode}

This section is meant as an informal clarification of the protocol, and is not normative.
The pseudocode here is designed to show the intent of the protocol,
so it is not optimized for things like intersection of sets and other shortcuts.

In this code, `signal_rrset(this_name)` means an `SVCB` query for the `'_dns'` prefix of `this_name`.
The `Query over secure transport until successful` section ignores differences in name server selection and retry behaviour in different resolvers.

~~~
# Inputs
ns_names = List of NS Rdatas from the NS RRset for the queried name
can_do_secure = List of secure transports supported by resolver
secure_names_and_transports = Empty list, filled in below

# Fill secure_names_and_transports with (name, transport) tuples
for this_name in ns_names:
  if signal_rrset(this_name) is in the resolver cache:
    if signal_rrset(this_name) positively does not exist:
      continue
    for this_transport in signal_rrset(this_name):
      if this_transport in can_do_secure:
        add (this_name, this_transport) to secure_names_and_transports
  else: # signal_rrset(this_name) is not in the resolver cache
    queue a query for signal_rrset(this_name) for later caching

# Query over secure transport until successful
for (this_name, this_transport) tuple in secure_names_and_transports:
  query using this_transport on this_name
  if successful:
    finished

# Got here if no this_name/this_transport query was successful
#   or if secure_names_and_transports was empty
query using classic DNS; finished
~~~


## Resolver Session Failures {#tls_failures}

The following are some of the reasons that a DNS with encryption session might fail to be set up:

- The resolver receives a TCP RST response
- The resolver does not receive replies to TCP or TLS setup (such as getting the
TCP SYN message, the first TLS message, or completing TLS handshakes)
- The TLS handshake gets a definitive failure
- The encrypted session fails for reasons other than for authentication, such as incorrect algorithm choices or TLS record
failures


# Serving with Encryption

An operator of an authoritative server following this protocol SHOULD publish SVCB records as described in {{disc}}.
If they cannot publish such records, the security properties of their authoritative servers will not be found.
If an operator wants to test serving using encryption, they can publish SVCB records with short TTLs
and then stop serving with encryption after removing the SVCB records and waiting for the TTLs to expire.

It is acceptable for an operator of authoritative servers to only offer encryption on some of the named authoritative servers,
such as when the operator is determining how far to roll out encrypted service.

A server MAY close an encrypted connection at any time. For example, it can close the session
if it has not received a DNS query in a defined length of time.
The server MAY close an encrypted session after it sends a DNS response;
however, it might also want to keep the session open waiting for another DNS query from the resolver.
{{DNS-OVER-TCP}} says "both clients and servers SHOULD support connection reuse" for TCP
connections, and that advice could apply as well for DNS with encryption,
especially as DNS with encryption has far greater overhead for re-establishing a connection.
If the server closes the DNS with encryption session, the resolver can possibly re-establish a DNS with encryption session
using encrypted session resumption.

For any DNS with encryption protocols, TLS version 1.3 {{TLS-13}} or later MUST be used.


# IANA Considerations

(( Update registration for TCP/853 to also include ADoT ))

(( Maybe other updates for DoH and DoQ ))


# Security Considerations

The method described in this document explicitly allows a resolver to perform DNS communications over
traditional unencrypted, unauthenticated DNS on port 53, if it cannot find an authoritative server
that advertises that it supports encryption.
The method described in this document explicitly allows a resolver using encryption
to choose to allow unauthenticated encryption.
In either of these cases, the resulting communication will be susceptible to obvious and well-understood
attacks from an attacker in the path of the communications.

{{TLS-1.3}} specifically warns against anonymous connections because such connections only provide
protection against passive eavesdropping while failing to protect against active on-path attacks.
Section C.5 of {{TLS-1.3}} explicitly states applications MUST NOT use TLS with unverifiable server
authentication unless there is explicit configuration or a specific application profile to do so.
This document is such an application profile.

Encrypting the traffic between resolvers and authoritative servers does not solve all the privacy issues
for resolution.
See {{PRIVACY-REC}} and {{PRIVACY-CONS}} for in-depth discussion of the associated privacy issues.


# Acknowledgements

Puneet Sood contributed many ideas to early drafts of this document.

The DPRIVE Working Group has contributed many ideas that keep shifting the focus and content of this document.

--- back
